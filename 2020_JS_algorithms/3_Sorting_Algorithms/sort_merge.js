// сложность этой сортировки — O(n * log n), то есть длина массива (надо как минимум раз полностью пройти по
// массиву), умноженная на логарифм от длины (сложность постоянного деления пополам).

// быстрая универсальная сортировка

// сортировка слиянием и быстрая сортировка — это лучшие универсальные сортировки.
// То есть они будут стабильно хорошо работать в любых ситуациях с любыми данными (естественно, в пределах разумного).
// Хотя да, существуют разные сортировки со сложностью лучше, чем O(n * log n): например, radix sort. Но их применение специфично и не является универсальным.

function mergeSort(unsortedArray) {
    // условие выхода из рекурсии
    // если переданный массив имеет менее двух элементов - нечего сортировать
    if (unsortedArray.length < 2) {
        return unsortedArray;
    }

    // находим центр при помощи побитовой операции сдвига на один бит вправо
    // аналог деления на два и округления вниз, только эффективнее и элегантнее
    const middle = unsortedArray.length >> 1;
    const left = unsortedArray.slice(0, middle); // левая часть
    const right = unsortedArray.slice(middle); // правая часть

    // вся магия сортировки в этом методе merge
    return merge(mergeSort(left), mergeSort(right));
}
