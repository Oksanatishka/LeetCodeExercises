Resources:
1) A perfect guide for cracking a JavaScript interview (A developer’s perspective)
https://medium.com/dev-bits/a-perfect-guide-for-cracking-a-javascript-interview-a-developers-perspective-23a5c0fa4d0d
2) https://dou.ua/lenta/articles/what-you-should-know-about-algorithms/?from=fp_top1m_also
3) JS algorithms on Github https://github.com/trekhleb/javascript-algorithms
4) https://medium.com/javascript-in-plain-english/50-javascript-interview-questions-4707d9286aac

//-----------------------------------------------------------------

1) Repeat Functions https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions
    hoisting, encapsulation
2) Understand bind, apply and call
    currying
    Use .bind() when you want that function to later be called with a certain context, useful in events. 
    Use .call() or .apply() when you want to invoke the function immediately, with modification of the context.
3) Understand JavaScript scope well (Closures as well)
    Global scope
    Local Scope/Function scope
    Block scope(Introduced in ES6)  - 'let' keyword (which limits a variable’s scope to a given parenthesis block).

    JavaScript closure is a function that returns another function and wraps data.
4) Understand 'this' keyword well(global this === window, function and object scopes)
5) Understand objects well (Object.freeze, Object.seal) https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object
    Ways to create an object:
        var marks = {};
        var marks = new Object();
    Convert a given object into a JSON string and also reverse it back using JSON object’s 'stringify' and 'parse' methods respectively.
        var marks = {physics: 98, maths:95, chemistry: 91};
        JSON.stringify(marks);                                      // returns "{"physics":98,"maths":95,"chemistry":91}"
        JSON.parse('{"physics":98,"maths":95,"chemistry":91}');     // Get object from string
    Iterating over the object using Object.keys
    List of values of an object Object.values 
    Other important functions on an object are:
        Object.prototype(object)    e.g.    marks.hasOwnProperty("physics"); // returns true
                                            console.log(newCar instanceof Car); // returns true
        Object.freeze(function)     e.g.    Object.freeze(marks);           // allows us to freeze an object so that existing properties cannot be modified.
        Object.seal(function)           // won’t allow new property addition or deletion or properties.
6) Understand Prototypical Inheritance well
    - Class properties are bound using 'this'
    - Class methods are bound using 'prototype' object
    - To inherit properties, use 'call' function passing 'this' object
    - To inherit methods, use Object.create to link prototypes of parent and child, e.g. Dog.prototype = Object.create(Animal.prototype);
    - Always set child class constructor to itself for getting the right identity of its objects

    What is the prototype chain in JavaScript?
        Answer: Inheritance in JavaScript is called prototypal inheritance. When you try to access a property of an object, the property will not only be looked for in the object, but on the prototype of the object, on the prototype of the prototype and this goes on until a matching property is found or we reach the end of the prototype chain.
7) Understand the callbacks and promises well
    Callbacks are the functions those executed after an I/O(input/output) operation is done.
    Ex. AJAX(XMLHttpRequest) call from the browser to a server, events generated by the mouse. keyboard etc.

    > In which states can a Promise be?
        A Promise is always in one of the following three states:
        - pending: this is the initial state which we start from
        - fulfilled: this means the promise has been fulfilled successfully.
        - rejected: this means the promise has been rejected, there was an error.
    > What are the the advantages and disadvantages of using Promises?
8) Understand the regular expressions well  http://www.rexegg.com/regex-quickstart.html
    To create a new regular expression:
        var re = /ar/;
        var re = new RegExp('ar'); // This too works
    See the matching string using exec function
        re.exec("car"); // returns ["ar", index: 1, input: "car"]
        re.exec("cab"); // returns null
    Types of elements in RegEx:
        Characters Ex: \w — Alphanumeric, \d — Decimal, \D — Non decimal
        Character classes Ex: [x-y] in range x to y, [^x] not x
        Quantifiers Ex: +, ?, * (greedy and lazy matchers)
        Boundaries Ex: ^(beginning of input), $(end of input)
    Other functions: match, search, replace - to find a string in another using regular expressions. But these functions should be used on the string itself.
9) Understand Map, Reduce and Filter well
    Functional programming
        Mathematical functions
        A pure function - always returns the same output for the given input. E.g. Map, Reduce and Filter. The original array is not changed in all three cases which are proving the purity of these functions.

        // This f-n is pure - Given the input is 2, 2, the output will always be 4
        const sum = (a, b) => a + b;

        // This f-n is not pure - It will give different results even if the inputs are the same
        const rand = (a, b) => Math.random() * (a - b);

10) Understand Error handling patterns
    try/catch blocks
        $("button").click(function(){
            $.ajax({url: "user.json", success: function(result){
            
            try {     
                updateUI(result["posts"]);
            }
            catch(e) {
                // Custom functions
                logError();
                flashInfoMessage();      
            }
            }});
        });
11) Hoisting (a process of pushing the declared variables to the top of the program while running it.)  
    doSomething(foo); // used before
    var foo; // declared later
    JavaScript only hoists declarations    https://developer.mozilla.org/en-US/docs/Glossary/Hoisting
    Initializations are not hoisted!
12) Event Bubbling
    bubbling <->capturing   (whether direction occurs towards parent or towards the child)
    In bubbling, the event is first captured and handled by the innermost element and then propagated to outer elements.
    In capturing, the process is in reverse.
    bubbling model:     addEventListener("click", handler, useCapture=false)
    capturing model:    addEventListener("click", handler, useCapture=true)

-----------------------------------------------------------------------
13) JavaScript Design Patterns https://github.com/drenther/js-design-patterns (эта тема касательно Class / object)
    https://medium.com/better-programming/javascript-design-patterns-25f0faaaa15
        - Constructor Pattern
        - Module Pattern
        - Revealing Module Pattern
        - Singleton Pattern
            it restricts instantiation of a class to a single object. Classically, the Singleton pattern can be implemented by creating a class with a method that creates a new instance of the class if one doesn’t exist. In the event of an instance already existing, it simply returns a reference to that object.
        - Observer Pattern
        - Publish/Subscribe Pattern
        - Mediator Pattern
        - Prototype Pattern
        - Command Pattern
        - Facade Pattern
        - Factory Pattern
        - Mixin Pattern

14) What is event delegation?
    DOM event delegation is used for responding to user events via a single parent rather than reach child node. With it, you can bind an event handler to a common parent element that will handle any event happening on one of its children.

15) What data types there are in JavaScript?
    String
    Number
    Null
    BigInt
    Boolean
    Undefined
    Symbol
    Object  (not primitive)

16)  What is the difference between function expression and function declaration?
        function expressions, e.g. var func = function() { return 5; }
            - assigning the function to a variable
            - not hoisted. If you call the function before it was initialized, you will get a type error.
        function declaration, e.g. function func() { return 5; }
            - NOT assigning the function to a variable
            - hoisted

17) Is JavaScript a typed language?
    JavaScript is weakly typed in its nature. This enables us to use implicit(неявный) type conversion.

18) What is the DOM?
    The Document Object Model is an API that links HTML and XML document elements — called nodes — into a tree structure. 

19) ARRAYS
> How can we check if something is an array?
    // Check the constructor
    variable.constructor === Array

    // Check if the variable is an instance of Array
    variable instanceof Array

    // Check its prototype
    Object.prototype.toString.call(variable) === '[object Array]';

    // Use the built in isArray
    Array.isArray(obj);

> How can we merge two arrays?
    Array.concat()          e.g. array1.concat(array2);  
    ES6 destructuring:      e.g. [...array1, ...array2];

>  How do you empty an array?
    const array = [1, 2, 3];

    // Assigning to an empty array
    array = [];

    // Setting its length property to 0
    array.length = 0;

    // Using splice with the array's length
    array.splice(0, array.length);

> What is the difference between map() and forEach()?
    map() creates a new array.  (immutable data following the functional programming paradigm)
    forEach() don’t.

20) OBJECTS
> What are the different ways we can create objects in JavaScript?
    // Using object literals
    const obj = { ... };

    // Using the new keyword
    function Obj(props) {
    this.props = props;
    };

    const obj = new Obj('👋');

    // Using Object.create()
    function newObject(props) {
    this.props = props;
    };

    const obj = Object.create(newObject);

    // Using Object.assign()
    const obj = { ... };
    const copy = Object.assign({}, obj);

> How do you clone objects in JavaScript?
    const obj = { ... };

    // Shallow copy can be done by using the object spread operator:
    const shallow = { ...obj };

    // Deep copy examples:
    JSON.parse(JSON.stringify(obj));
    Object.assign({}, obj);

21) What is AJAX? What are the cons and pros of it?
    The pros include:
        Updating a web page without actually reloading it
        Request and receive data from the server after the page has been loaded
        Send data to the server in the background
    Some of its cons are:
        It won’t work in case JavaScript is disabled
        If history is not taken care of, it can make the browser’s back button useless
        Since it increases code size, it can make your site vulnerable to security threats

22) What are the differences between a normal script tag vs using async or defer attribute on it?
    <script></script>
    <script async></script>     async is used to continue html parsing while the script fetches.
    <script defer></script>     defer is used to only execute the script after the html parsing is finished.
                                They are both used for optimization purposes. 

23) What is the difference between local storage and session storage?
        Local storage is used for storing data locally on a user’s browser, like saving user preferences or other settings. It is persisted through page reloads and stays with the browser until it is cleared manually or through a setting.
        Session storage acts in a similar way to local storage. The only difference here is that while data stored in local storage has an expiration date, the data stored in session storage will expire as soon as the page’s session ends, that’s it, when the page is closed.

24) What is the difference between a web worker and a service worker?
        Web workers are used for running heavy scripts in a background thread without causing the site to freeze, while 
        Service workers are a type of web workers. They are useful for modifying responses from network requests. They basically act as proxies. They are used for building offline applications.

25) What is the event loop?
    ???

26) What does the second parameter of parseInt do?
    parseInt(2, 2);     // This will return NaN
    parseInt(2, 10);    // This will return 2

27) What are bitwise operators?
    0 & 1 // AND - Returns 0  
    0 | 1 // OR - Returns 1
    ~1 // NOT - Returns -2

28) What are the differences between var let and const?
    var   - function scoped variable, can be reassigned or redeclared later on.
    let   - block scoped variable, can be reassigned but can’t be redeclared.
    const - a block scoped variable, can’t be reassigned nor redeclared. 

29) What are some ES9 features?
    - Using spread operator on objects
    const obj = { 'a': 1 };
    const spread = { 'b': 2, ..obj  };  // This will equal to { 'b': 2, 'a': 1 };
    - ...

30) What is the difference between null and undefined?
    undefined - a variable has not been given a value. 
    null - there is no value.

31) Name some of the JavaScript Frameworks
    Angular
    React
    Vue

32) What are Exports & Imports?
    Imports and exports help us to write modular JavaScript code. 
    Using Imports and exports we can split our code into multiple files. 