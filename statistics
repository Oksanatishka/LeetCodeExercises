Solved:


March 2019
------ Easy: Array ------
Mar 6: 1, 26
Mar 7: 27, 35, 53
Mar 8: (66), 88
Mar 11: 118, 121, 119, 122, 167, 169, (189), 217, 219, 268
Mar 12: 283, 414, 448, 485, 509, 532, 561, (566), (581)
Mar 13: 605, 628, 643, (661), 665, 674, 697, 717, 724, 747, 830
Mar 19: 189


April 2019
------ Easy: String ------
Apr 4: 680, 125, 13, 9,
------ Easy: Math ------
Apr 5: 7, 258, 69
Apr 8: 231, 326, 263, 970, 976, 942,
Apr 10: 136,
Apr 11: 137, 260, 202

------ Easy: Bit manipulation------ 
Apr 21: 190, 191, 371
Apr 22: 342, 389, 

------ Easy: Hash Table------ 
Apr 23: 242, 290, 1002

------ Easy: Strings------ 
Jul 27: 14, 20, 28, 38, 
Jul 28: 58, 125, 344, 345,

----------------------------------------



Solved with a solution:
118,122, 189, 976, 202, 190, 371, 1002

Not all cases are handled:
66, 628, 665, 697, 680, 949

Not Solved:
566, 581, 661, 746, 766, 832

----------------------------------------
To compile & run Java file:
javac Solution.java
java Solution

To run Javascipt code:
node solution.js

To compile & run c++ file:
gcc solution.cpp
./a.out

======================================= 1. Arrays ======================================= 
The simplest type of data structure is a linear array, also called one-dimensional array.
Because the mathematical concept of a matrix can be represented as a two-dimensional grid, two-dimensional arrays are also sometimes called matrices. 
In some cases the term "vector" is used in computing to refer to an array, although tuples rather than vectors are the more mathematically correct equivalent. 
Tables are often implemented in the form of arrays, especially lookup tables; the word table is sometimes used as a synonym of array.
Arrays are useful mostly because the element indices can be computed at run time. 
Array types are often implemented by array structures; however, in some languages they may be implemented by hash tables, linked lists, search trees, or other data structures.

Methods:
    1) reverse() - reverses an array in place. The first array element becomes the last, and the last array element becomes the first.

split()     <-->     join()

JAVA Methods
    Integer.parseInt()    - convert string to integer
    Integer.toString()    - convert integer to string

Methods to REMOVE elements from JavaScript arrays:
    pop() - Removes from the End of an Array
    shift() - Removes from the beginning of an Array
    splice(indexOfLocationInArr, numberOfElemToRemove) - removes from a specific Array index
    filter - allows you to programatically remove elements from an Array, filter() does not mutate the array on which it is called, but returns a new array. filter() has a single parameter, a callback method.
    
Methods to ADD elements to JavaScript arrays:
    push() - add one or more elements to the end of an array.
    unshift() - add elements to the beginning of an array.
    concat() - adds elements to an array. Unlike the push method, it does not modify the existing array, but instead returns a new array.
    splice(location, numberOfElemToDelete, ElemToAdd) - adding and/or removing elements from an array, numberOfElemToDelete = 0

Methods to CONVERT strings to numbers:
    parseInt(stringToConvert, radix)    - radix is the base number used in mathematical systems. For our use, it should always be 10.
    parseFloat(stringToConvert)
    Number()    - Sometimes it’s an integer. Other times it’s a point number. (depends on parameter)

Methods to SORT:
1)  sort()  - sorts elements alphabetically. 
    To sort numerically:
    // ES2015
        numArray.sort((a, b) => a - b); // For ascending sort
        numArray.sort((a, b) => b - a); // For descending sort
    // ES5
        numArray.sort(function (a, b) {  return a - b;  });
For more information, check Sorting Algorithms https://www.geeksforgeeks.org/sorting-algorithms/        
2) Insertion sort
3) Selection sort
....


JavaScript Multidimensional Array
var activities = [['work',9],[],[]]
activities[0][1]    // output: 9    To access an element of the multidimensional array
activities.push(['Study',2]);       Adding an element to the JavaScript multidimensional array

// Iterating a JavaScript multidimensional array
for (var i = 0; i < activities.length; i++) {
    var innerArrayLength = activities[i].length;
    for (var j = 0; j < innerArrayLength; j++) {
        console.log('[' + i + ',' + j + '] = ' + activities[i][j]);
    }
}


*** Pascal's triangle   -   each number is the sum of the two numbers directly above it.
*** The Fibonacci numbers, commonly denoted F(n) form a sequence, called the Fibonacci sequence, 
    such that each number is the sum of the two preceding ones, starting from 0 and 1. That is,
    F(0) = 0,   F(1) = 1
    F(N) = F(N - 1) + F(N - 2), for N > 1.
*** K-diff pair is an integer pair (i, j), where i and j are both numbers in the array and their absolute difference is k.
    // Removing duplicate sub-arrays
    // https://stackoverflow.com/questions/47255382/removing-duplicate-sub-arrays
*** Pivot index is the index where the sum of the numbers to the left of the index is equal to 
    the sum of the numbers to the right of the index.
*** A matrix is Toeplitz if every diagonal from top-left to bottom-right has the same element.


Solution Approaches:
1_ Brute Force
Полный перебор (или метод «грубой силы», англ. brute force) — поиск решения исчерпыванием всевозможных вариантов.
Loop through each element x

2_ Two-pass Hash Table
Hash tables have a O(1) complexity (meaning they’re superfast). The more collisions you generate, the more the complexity tends toward O(n).
hash table (otherwise known as dictionary(in Python), associative array(in PHP), hashmap, map(in JavaScript), and…the list goes on).
Хеш-табли́ца — это структура данных, реализующая интерфейс ассоциативного массива, а именно, она позволяет 
хранить пары (ключ, значение) и выполнять три операции: операцию добавления новой пары, операцию поиска и 
операцию удаления пары по ключу.
Выполнение операции в хеш-таблице начинается с вычисления хеш-функции от ключа.
https://sunfishempire.wordpress.com/2014/08/19/5-ways-to-use-a-javascript-hashmap/


Time Complexity
O(1) - одна операция (даже если O(3))
O(n) - n oпераций
O(n²) - n*n операций (double loop)
O(n+m) - если есть два последовательных цикла


1) Hash Table   O(n) -- O(1)
Time complexity is O(n) because accessing the counter table is a constant time operation.
Although we do use extra space, the space complexity is O(1) because the table's size stays constant no matter how large n is.
The space required by hash_table is equal to the number of elements in nums. 

2) Bit manipulation O(n) -- O(1)
Time complexity : O(n). We only iterate through nums, so the time complexity is the number of elements in nums.
Assuming that XOR is a constant-time operation, this algorithm does constant work on nn iterations, so the runtime is overall linear.
Space complexity : O(1). This algorithm allocates only constant additional space.

3) Brute Force  O(n^2) -- O(1)
Time complexity : O(n^2)
The brute force algorithm contains two nested for loops that each run for n iterations, adding up to quadratic time complexity.
Space complexity : O(1)
The brute force solution does not allocate additional space proportional to the input size.

======================================= 2. String ======================================= 
Methods: 
    1) split()      - splits a String object into an array of strings by separating the string into substrings, using a specified separator string to determine where to make each split.
    2) slice()      - extracts a section of a string and returns it as a new string, without modifying the original string.
    3) substring()  - returns the part of the string between the start and end indexes, or to the end of the string.
    4) join()       - creates and returns a new string by concatenating all of the elements in an array, separated by commas or a specified separator string.

======================================= Stacks ======================================= 
Array as a stack
JS methods: push, pop, peek, length/size.

How to implement stack in JS?

======================================= Set ======================================= 
Methods:
in es6: has(), values(), add(), remove(), size()
not in es6: union(), intersection(), difference(), subset(),

======================================= Queue ======================================= 
Methods: enqueue, dequeue, front, size, isEmpty

======================================= Binary Search Tree ======================================= 
Binary Search Tree: Traversal & Height(min/max)

Traversal:                                
    inOrder     (Left, Root, Right)     /\
    preOrder    (Root, Left, Right)             /_
    postOrder   (Left, Right, Root)     _\ (BFS Breadth First Search))
    Breadth First or Level Order Traversal

======================================= Hash Tables ======================================= 
search, add, remove

хеш-таблицы
Борьба с коллизиями:
- метод цепочек (Chaining) (открытое хеширование / закрытая адресация) 
        элементы с одинаковым хешем попадают в одну ячейку в виде связного списка.
- метод открытой индексации (Open addressing) (закрытое хеширование)
        хранится не указатель на связный список, а один элемент (ключ, значение).
        если ячейка с индексом hash(key) занята, то осуществляется поиск свободной ячейки в следующих позициях таблицы

-> Хеш-функция - ф-я преобразующая значение ключа(напр. строки, числа, файла) в целое число.
-> Hash code / hash sum (контрольная сумма) / hash - значение возвращаемое хеш-функцией.
-> Perfect hash f-n - хеш-ф-я без коллизий


Methods of class Hashtable:
- get(key)              Returns the value associated to the specified key.
- put(key,value)        Associates the specified value to the specified key.
- remove(key)           Removes the specified key with its value.
- clear()               Clears all the hashtable, removing both the keys and values.
- indexOfKey(key)       Returns the index of the specified key, based on the adding order.
- indexOfValue(value)   Returns the index of the specified value, based on the adding order.
- entryAt(index)        Returns an object with two properties: key and value, representing the entry at the specified index.
- containsKey(key)      Returns whether the hashtable contains the specified key.
- containsValue(value)  Returns whether the hashtable contains the specified value.
- forEach(iterator)     Iterates all entries in the specified iterator.

Properties:
- length (Read-only)    Gets the count of the entries in the hashtable.
- keys (Read-only)      Gets an array of all keys in the hashtable.
- values (Read-only)    Gets an array of all values in the hashtable.
- entries (Read-only)   Gets an array of all entries in the hashtable. They're represented in the same form of the method entryAt().


The find() method returns the value of the first element in the array that satisfies the provided testing function. 
The filter() method creates a new array with all elements that pass the test implemented by the provided function.


Resources:
- презентация https://www.slideshare.net/mkurnosov/6-32402313
- Hash Tables in Javascript http://www.mojavelinux.com/articles/javascript_hashes.html
- How to do associative array/hashing in JavaScript https://stackoverflow.com/questions/1208222/how-to-do-associative-array-hashing-in-javascript


======================================= Linked List ======================================= 
======================================= Trie (prefix tree) ======================================= 



==============================================================================
======================================= Bitwise operators
==============================================================================
The decimal, denary or base 10 numbering system is what we use in everyday life for counting.
In the decimal number system ten numerals are used to represent numbers from zero to nine.
Binary only uses two numerals 0 and 1.

For a binary number, the most significant bit (MSB) is the digit furthermost to the left of the number and 
the least significant bit (LSB) is the rightmost digit.

1) convert decimal to binary number
    Steps to Convert Decimal to Binary (remainder method):
        This involves dividing the number by 2 recursively until you're left with 0, while taking note of each remainder.
        - Write down the decimal number.
        - Divide the number by 2.
        - Write the result underneath.
        - Write the remainder on the right hand side. This will be 0 or 1.
        - Divide the result of the division by 2 and again write down the remainder.
        - Continue dividing and writing down remainders until the result of the division is 0.
        - The most significant bit (MSB) is at the bottom of the column of remainders and the least significant bit (LSB) is at the top.
        - Read the series of 1s and 0s on the right from the bottom up. This is the binary equivalent of the decimal number.

2) convert decimal to hexidecimal (https://www.permadi.com/tutorial/numDecToHex/)
    Steps:
        - Divide the decimal number by 16.   Treat the division as an integer division.  
        - Write down the remainder (in hexadecimal).
        - Divide the result again by 16.  Treat the division as an integer division.  
        - Repeat step 2 and 3 until result is 0.
        - The hex value is the digit sequence of the remainders from the last to first.

    hexidecimal     0   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F
    decimal         0   1   2   3   4   5   6   7   8   9   10  11  12  13  14  15

Resources:
- https://owlcation.com/stem/How-to-Convert-Decimal-to-Binary-and-Binary-to-Decimal
- https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators
- https://leetcode.com/problems/sum-of-two-integers/discuss/84278/a-summary-how-to-use-bit-manipulation-to-solve-problems-easily-and-efficiently

*********************************************************************************************************
*********************************************************************************************************
*********************************************************************************************************

Happy number 
    Starting with any positive integer, replace the number by the sum of the squares of its digits, and 
    repeat the process until the number either equals 1 (where it will stay), or it loops endlessly in 
    a cycle that does not include 1.
    If it is not happy number it will end at '4'. 

Prime number
    A prime number is a whole number greater than 1, which is only divisible by 1 and itself. 
    First few prime numbers are : 2 3 5 7 11 13 17 19 23 …..
    Two is the only even Prime number. Two and Three are only two consecutive natural numbers which are prime too.
    

Isomorphic strings
    Two strings are isomorphic if the characters in s can be replaced to get t.

*********************************************************************************************************
JS cheatsheet https://htmlcheatsheet.com/js/
Udemy course 
    https://www.udemy.com/ultimate-javascript-leetcode-interview-bootcamp/
    https://github.com/kaeducation/LeetCode_JS 

    Install node.js (download from the website) and check version: 
        node -v
        sudo npm install -g jest
        jest -v
    Install VS Code.    