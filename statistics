Solved:


March 2019
------ Easy: Array ------
Mar 6: 1, 26
Mar 7: 27, 35, 53
Mar 8: (66), 88
Mar 11: 118, 121, 119, 122, 167, 169, (189), 217, 219, 268
Mar 12: 283, 414, 448, 485, 509, 532, 561, (566), (581)
Mar 13: 605, 628, 643, (661), 665, 674, 697, 717, 724, 747, 830
Mar 19: 189


April 2019
------ Easy: String ------
Mar 4: 680, 125, 13, 9,
------ Easy: Math ------
Mar 5: 7, 258, 
----------------------------------------
Solved with a solution:
118,122, 189

Not all cases are handled:
66, 628, 665, 697, 680,

Not Solved:
566, 581, 661, 746, 766, 832

----------------------------------------
To compile & run Java file:
javac Solution.java
java Solution

To run Javascipt code:
node solution.js

To compile & run c++ file:
gcc solution.cpp
./a.out

======================================= 1. Arrays ======================================= 
The simplest type of data structure is a linear array, also called one-dimensional array.
Because the mathematical concept of a matrix can be represented as a two-dimensional grid, two-dimensional arrays are also sometimes called matrices. 
In some cases the term "vector" is used in computing to refer to an array, although tuples rather than vectors are the more mathematically correct equivalent. 
Tables are often implemented in the form of arrays, especially lookup tables; the word table is sometimes used as a synonym of array.
Arrays are useful mostly because the element indices can be computed at run time. 
Array types are often implemented by array structures; however, in some languages they may be implemented by hash tables, linked lists, search trees, or other data structures.


JAVA Methods
    Integer.parseInt()    - convert string to integer
    Integer.toString()    - convert integer to string

Methods to REMOVE elements from JavaScript arrays:
    pop() - Removes from the End of an Array
    shift() - Removes from the beginning of an Array
    splice(indexOfLocationInArr, numberOfElemToRemove) - removes from a specific Array index
    filter - allows you to programatically remove elements from an Array, filter() does not mutate the array on which it is called, but returns a new array. filter() has a single parameter, a callback method.
    
Methods to ADD elements to JavaScript arrays:
    push() - add one or more elements to the end of an array.
    unshift() - add elements to the beginning of an array.
    concat() - adds elements to an array. Unlike the push method, it does not modify the existing array, but instead returns a new array.
    splice(location, numberOfElemToDelete, ElemToAdd) - adding and/or removing elements from an array, numberOfElemToDelete = 0

Methods to CONVERT strings to numbers:
    parseInt(stringToConvert, radix)    - radix is the base number used in mathematical systems. For our use, it should always be 10.
    parseFloat(stringToConvert)
    Number()    - Sometimes it’s an integer. Other times it’s a point number. (depends on parameter)

Methods to SORT:
1)  sort()  - sorts elements alphabetically. 
    To sort numerically:
    // ES2015
        numArray.sort((a, b) => a - b); // For ascending sort
        numArray.sort((a, b) => b - a); // For descending sort
    // ES5
        numArray.sort(function (a, b) {  return a - b;  });
For more information, check Sorting Algorithms https://www.geeksforgeeks.org/sorting-algorithms/        
2) Insertion sort
3) Selection sort
....


JavaScript Multidimensional Array
var activities = [['work',9],[],[]]
activities[0][1]    // output: 9    To access an element of the multidimensional array
activities.push(['Study',2]);       Adding an element to the JavaScript multidimensional array

// Iterating a JavaScript multidimensional array
for (var i = 0; i < activities.length; i++) {
    var innerArrayLength = activities[i].length;
    for (var j = 0; j < innerArrayLength; j++) {
        console.log('[' + i + ',' + j + '] = ' + activities[i][j]);
    }
}


*** Pascal's triangle   -   each number is the sum of the two numbers directly above it.
*** The Fibonacci numbers, commonly denoted F(n) form a sequence, called the Fibonacci sequence, 
    such that each number is the sum of the two preceding ones, starting from 0 and 1. That is,
    F(0) = 0,   F(1) = 1
    F(N) = F(N - 1) + F(N - 2), for N > 1.
*** K-diff pair is an integer pair (i, j), where i and j are both numbers in the array and their absolute difference is k.
    // Removing duplicate sub-arrays
    // https://stackoverflow.com/questions/47255382/removing-duplicate-sub-arrays
*** Pivot index is the index where the sum of the numbers to the left of the index is equal to 
    the sum of the numbers to the right of the index.
*** A matrix is Toeplitz if every diagonal from top-left to bottom-right has the same element.


Solution Approaches:
1_ Brute Force
Полный перебор (или метод «грубой силы», англ. brute force) — поиск решения исчерпыванием всевозможных вариантов.
Loop through each element x

2_ Two-pass Hash Table
Hash tables have a O(1) complexity (meaning they’re superfast). The more collisions you generate, the more the complexity tends toward O(n).
hash table (otherwise known as dictionary(in Python), associative array(in PHP), hashmap, map(in JavaScript), and…the list goes on).
Хеш-табли́ца — это структура данных, реализующая интерфейс ассоциативного массива, а именно, она позволяет 
хранить пары (ключ, значение) и выполнять три операции: операцию добавления новой пары, операцию поиска и 
операцию удаления пары по ключу.
Выполнение операции в хеш-таблице начинается с вычисления хеш-функции от ключа.
https://sunfishempire.wordpress.com/2014/08/19/5-ways-to-use-a-javascript-hashmap/


Time Complexity
O(1) - одна операция (даже если O(3))
O(n) - n oпераций
O(n²) - n*n операций (double loop)
O(n+m) - если есть два последовательных цикла



======================================= Stacks ======================================= 
Array as a stack
JS methods: push, pop, peek, length/size.

How to implement stack in JS?

======================================= Set ======================================= 
Methods:
in es6: has(), values(), add(), remove(), size()
not in es6: union(), intersection(), difference(), subset(),

======================================= Queue ======================================= 
Methods: enqueue, dequeue, front, size, isEmpty

======================================= Binary Search Tree ======================================= 

